package repository.imp;

import model.Brand;
import model.Part;
import repository.PartRepository;
import repository.db.SingletonDatabase;

import javax.inject.Named;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Named
public class PartRepositoryImpl implements PartRepository {

    private SingletonDatabase database = SingletonDatabase.getInstance();

    public PartRepositoryImpl() {
        database = SingletonDatabase.getInstance();

    }

    public PartRepositoryImpl(SingletonDatabase database) {
        this.database = database;

    }


    @Override
    public Optional<Part> add(String brand, String model, int year) {
        ////       Add (you pass in the Make, Model, and Year, returns the Part ID of the newly created Car Part. The Car Part ID is generated by figuring out the largest Car Part ID already in the system +1),
        Optional<Brand> dbBrand = database.getBrands().stream().filter(brandElement -> brandElement.getName().toLowerCase().equals(brand.toLowerCase())).findFirst();
        if (dbBrand.isPresent()) {

            return database.addPart(dbBrand.get(), model, year);
        }

        return Optional.empty();
    }

    @Override
    public Optional<Part> remove(Long id) {
        // Remove (which will return the Car Part removed),

        return this.database.remove(id);
    }

    @Override
    public List<Part> Search(String brand, String model) {
        //Search (which will allow you to search by Make, Model, or Year, which will return a list of Car Parts.
        return database.getParts().stream().filter(part -> part.getBrand().getName().equals(brand) && part.getModel().equals(model))
                .collect(Collectors.toList());
    }

    @Override
    public List<Part> getall() {
        return this.database.getParts();
    }

    @Override
    public Optional<Part> Search(Long id) {
        //Otherwise you can search by Part ID, which will return one single Car Part)
        return database.getParts().stream().filter(part -> part.getId().equals(id)).findFirst();
    }

    @Override
    public void destroy() {
        this.database.destroy();
    }
}
